.TH AMAKELOCAL 1 "$Date$"
.SH NAME
amakelocal \- construct antelopemake.local for local site conditions
.SH SYNOPSIS
.nf
amakelocal [-v] [-i] [-c] [-p pfname] [-s system] [MACRO [MACRO ...]]
.fi
.SH DESCRIPTION
Antelope has a self-contained compile mechanism and structure with
rules codified in a standardized file $(ANTELOPEMAKE), as documented
in antelopemakefile(5). In general, contributed code is written to
stay within this self-contained framework as much as possible. At
times, however, it is necessary to write contributed-code utilities
that depend not only on the elements contained in or implied by the
standard Antelope framework, but also on elements available externally
and installed by the administrators of a given host system.

The \fBamakelocal\fP utility helps automate the process of compiling
self-contained trees of Antelope-style code (especially Antelope
contrib code) against Antelope and against external packages, whose
location may vary on individual systems, providing a standard way
to handle the external linkages. Internally, \fBamakelocal\fP has
two modes of operation, the \fIconstruct\fP mode and the \fIverify\fP
mode. Operators needing to compile contributed code on their local
system need to understand only the first mode. Developers of
contributed-code modules need to understand both.

In \fIconstruct\fP mode, \fBamakelocal\fP creates an \fI$(ANTELOPEMAKE).local\fP
file (see antelopemakelocal(5)) appropriate to the system-administration
conditions for the local system, tailored to support the compilation
of contributed-code modules that depend not only on Antelope but
also on external packages. Specifically, this program adjusts for
the parochial locations of software packages and libraries external
to Antelope but on which Antelope contributed-code programs depend.
More specifically, \fBamakelocal\fP allows a parameter file to
handle, in a standardized way, the configuration of Makefile macros
which may vary across different machines and different operating
systems. What \fBamakelocal\fP puts in the \fI$(ANTELOPEMAKE).local\fP
file depends on the contents of a local parameter file called
\fIamakelocal.pf\fP. If this parameter file isn't available,
\fBamakelocal\fP defaults to using the parameter-file
\fIamakelocal_proto.pf\fP, which comes with the program and should
not be modified.

In \fIverify\fP mode, \fBamakelocal\fP takes the names of one or
more necessary Makefile macros on the command line. If these macros
are configured and non-empty on the local system, \fBamakelocal\fP
allows the compilation of a module which depends on them to proceed.
If these are empty or not present on the local system, \fBamakelocal\fP
aborts the compilation of the current subdirectory. \fBamakelocal\fP's
success at this control depends on setting up a certain Makefile
structure, as shown in the example below.

.SH OPTIONS
.IP -c
Echo the values configured for the macros specified on the command-line,
or the values for all configured macros if no additional arguments are 
given
.IP -v 
verbose
.IP "-p pfname"
Specify an alternate parameter file. If this option is used,
\fBamakelocal\fP does not default to using the \fIamakelocal_proto.pf\fP
file in the absence of the specified file.

.IP -i
Install mode. The default behavior of \fBamakelocal\fP is to create
an \fIantelopemake.local\fP file in the local directory, for installation
by a surrounding make hierarchy. If the -i option is invoked,
\fBamakelocal\fP will install the created file in $ANTELOPE/include
and remove the copy from the local directory, allowing the
\fBamakelocal\fP command to be run by hand from anywhere after
updating the driver parameter file.

.IP "-s system"
Override the automatic detection of system-type and generate a set of 
make rules for the specified system type (e.g. Linux, Darwin, SunOS)

.SH PARAMETER FILE
The \fIamakelocal.pf\fP parameter file contains specifications for
macros that will be custom-configured for the machine on which
compilation is taking place. If this parameter-file is present,
these contents are used. If \fIamakelocal.pf\fP is not present,
\fBamakelocal\fP defaults to the supplied \fIamakelocal_proto.pf\fP
parameter file. If an element is not present, or if the entry for
the current operating system is not specified or is empty, the
corresponding macro is omitted from the output file.

.IP dest
The \fIdest\fP parameter determines where the local make-rules will be installed. 

.IP output_file
The \fIoutput_file\fP parameter specifies what the local make-rules file
will be called. 

.IP elements
The \fIelements\fP array contains specifications for each local macro that needs
to be defined. It is composed of sub-elements, each one of which is named 
after the macro to be defined. This may be a simple string, in which case 
the same string contents are used on all deployed platforms. Alternatively
the sub-element value may be an array containing key-value pairs showing 
how that macro should be set on each operating-system type (operating-system
type is determined from the output of the \fImy_os()\fP function
in the perlsysinfo(3P) module).
.nf

antelope &env(ANTELOPE)

dest &antelope/include

output_file antelopemake.local

elements &Arr{
        XMOTIFLIB &Arr{
                Darwin 	-L/sw/lib
                SunOS -L/usr/openwin/lib
                Linux 	-L/usr/X11R6/lib
        }
        XMOTIFINCLUDE &Arr{
                Darwin 	-I/sw/include
                SunOS -I/usr/openwin/include
                Linux 	-I/usr/X11R6/include
        }
        PYTHONINCLUDE       &Arr{
                Darwin  /sw/include/python2.5
                Linux   /usr/local/include/python2.5
                SunOS /usr/local/include/python2.5
        }

}
.fi
.SH EXAMPLE
In \fIconstruct\fP mode, the \fBamakelocal\fP program creates an
\fIantelopemake.local\fP file based on the contents of \fIamakelocal.pf\fP
or \fIamakelocal_proto.pf\fP. This can happen as part of the normal
compilation process for the contributed-code repository, or can be
invoked from the command line by use of the \fI-i\fP option. The
example below shows the latter case:

.in 2c
.ft CW
.nf
% \fBamakelocal -iv\fP 
amakelocal: Couldn't find 'amakelocal.pf'
Using parameter-file 'amakelocal_proto.pf' 
amakelocal: Generated 'antelopemake.local' from parameter-file 'amakelocal_proto' 
amakelocal: Installing 'antelopemake.local' in /opt/antelope/4.10/include 
%

.fi

If you are satisfied with the default settings in \fIamakelocal_proto.pf\fP
(which is doubtful, given that the intent of this utility is to compile against
packages in locations specific to the local machine), you may use them 
as such. Otherwise, copy the default \fIamakelocal_proto.pf\fP file to a file 
named \fIamakelocal.pf\fP; modify the latter to suit your local purpose; then 
run the \fBamakelocal\fP command to install the local make-rules as above:
.nf

% cd ~/data/pf
% pfcp amakelocal_proto amakelocal
% vi amakelocal.pf
% amakelocal -iv

.fi

.ft R
.in
In \fPverify\fP mode, the \fBamakelocal\fP program serves as an element 
in the compile process for a given software module. The normal Antelope
Makefile for the module should be moved to the name Makefile2. Under the
standard 

.nf

include $(ANTELOPEMAKE) 

.fi

line one should add an additional line for the automatically generated
local make rules:

.nf

include $(ANTELOPEMAKE) 
include $(ANTELOPEMAKE).local

.fi

The required macros can then be used inside this normal Antelope Makefile 
(per antelopemakefile(5)).

Another \fImakefile\fP (lowercase 'm'!!) should then be created with the
following contents, listing the required macro names on the command line 
for \fBamakelocal\fP (the example below is taken from the compilation 
structure for the Antelope Python libraries):

.nf

% pwd
/opt/antelope/4.10/src/contrib/data/python/datascope

% cat makefile 

all clean Include install installMAN pf relink tags uninstall test :: FORCED
        @-if amakelocal PYTHONINCLUDE ; then \\
        $(MAKE) -f Makefile2 $@ ; \\
        fi

FORCED:

% 
.fi
.SH "SEE ALSO"
.nf
antelopemake(5), antelopemakelocal(5), localmake(1)
.fi
.SH "BUGS AND CAVEATS"
This is a development prototype. 

Do not modify the parameter-file \fIamakelocal_proto.pf\fP unless
you are a developer extending the capabilities and external linkages
of the Antelope contributed-code source-tree itself. If you just
want to use the configuration mechanism for your local site, copy
\fIamakelocal_proto.pf\fP to \fIamakelocal.pf\fP (putting the latter
somewhere on your parameter-file path), and edit the latter
appropriately.

It would be nice for \fBamakelocal\fP or some other program to have
a GUI editing mode to modify the \fIamakelocal.pf\fP file.

\fBamakelocal\fP could be more sophisticated in its tests and its
flexibility for specifying required dependencies (presence of perl
modules, or presence of certain executables, for example; perhaps
compliance with certain tests); this is a work in progress.

Ultimately it might be nice if amakelocal tested the things it was
putting in the \fIantelopemake.local\fP file, rather than just assuming
the parameter-file is correct.

It may not ultimately be advantageous to have the compilation
turn-on/turn-off based entirely on the presence of make-rule macros.
There may be other types of conditions which should govern.

It must be emphasized that despite appearances, this is not an
attempt to replace the GNU autoconf/automake architecture, which
has a sysadmin philosophy diametrically opposite the self-contained
approach in Antelope. The amakelocal effort is merely an attempt
to carefully and consciously 'break the seal' of the Antelope
self-containment to make some selected external dependencies possible.

.SH AUTHOR
Kent Lindquist
Lindquist Consulting, Inc.
.\" $Id$
