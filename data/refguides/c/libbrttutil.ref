<library>
BRTT Utilities
brttutil
$(STOCKLIBS)
none
brttutil.h
other miscellaneous utilities

<subsection Pf Parameter Processing>
<cdeclarations>
int parse_param (Pf *pf, char *name, int type, int need, void *val)
    parse name parameter from pf parameter file object of a certain type into val and return an error if need is set and name with type does not exist; type may be P_SINT, P_LINT, P_FLT, P_DBL, P_STR, P_BOOL, P_TBL, P_TBLPF, P_ARR, P_ARRPF
int pf2struc (Pf *pf, int ndefs, Pf2strucDefs *defs, void *struc)
    parse pf parameter file object into a structure, struc, using a set of ndefs parsing definitions specified in defs

<subsection MT-Safe FIFO>
<cdeclarations>
Pmtfifo *pmtfifo_create (int maxqueue, int block, int check)
    create a POSIX MT-safe FIFO queue of maximum size maxqueue, block when the queue is full and check all subsequent calls to see if the queue still exists

int pmtfifo_set_timeout (Pmtfifo *mtf, double timeout)
    (re)set a read timeout on the mtf POSIX MT-safe FIFO queue

int pmtfifo_destroy (Pmtfifo *mtf, void (*free_value) (void *ptr))
    destroy the mtf POSIX MT-safe FIFO queue and free all resources

int pmtfifo_push (Pmtfifo *mtf, void *ptr)
    push pointer ptr onto the mtf POSIX MT-safe FIFO queue

int pmtfifo_pop (Pmtfifo *mtf, void **ptr)
    pop pointer *ptr from the mtf POSIX MT-safe FIFO queue

int pmtfifo_unpop (Pmtfifo *mtf, void *ptr)
    unpop pointer ptr back onto the mtf POSIX MT-safe FIFO queue

int pmtfifo_data_available (Pmtfifo *mtf)
    check for data availability on the mtf POSIX MT-safe FIFO queue

int pmtfifo_release_block (Pmtfifo *mtf)
    release an existing blocking condition on the mtf POSIX MT-safe FIFO queue

int pmtfifo_release_blocks (Pmtfifo *mtf)
    release any existing and all future blocking conditions (i.e. make the FIFO non-blocking) on the mtf POSIX MT-safe FIFO queue

<subsection Managed MT-Safe FIFO>
<cdeclarations>
Pmtmanagedfifo *pmtmanagedfifo_create (char *name)
    create a managed POSIX MT-safe FIFO queue named as name

Pmtmanagedfifo *pmtmanagedfifo_get (char *name)
    get a managed POSIX MT-safe FIFO queue named as name

Pmtfifo *pmtmanagedfifo_set_consumer (Pmtmanagedfifo *mtf, char *consumer_name, int maxqueue, int block)
    set a consumer with name consumer_name for the mtf managed POSIX MT-safe FIFO queue with a queue of maximum size maxqueue and block when the queue is full

Pmtfifo *pmtmanagedfifo_get_consumer (Pmtmanagedfifo *mtf, char *consumer_name)
    get the consumer with name consumer_name for the mtf managed POSIX MT-safe FIFO queue

int pmtmanagedfifo_destroy (Pmtmanagedfifo *mtf)
    destroy the mtf managed POSIX MT-safe FIFO queue and free all resources

int pmtmanagedfifo_push (Pmtmanagedfifo *mtf, Hook *data, Hook *(*copyproc) (Hook *), int copydata)
    push data object specified by Hook data onto the mtf managed POSIX MT-safe FIFO queue with copyproc callback for copying the data object and make a copy before pushing if copydata is set

int pmtmanagedfifo_pop (Pmtmanagedfifo *mtf, char *consumer_name, Hook **data, unsigned long *sequence)
    pop data object specified by Hook data from the mtf managed POSIX MT-safe FIFO queue for consumer with name consumer_name and return original queue sequence number in sequence

int pmtmanagedfifo_display (char *pre, Pmtmanagedfifo *mtf)
    display name of the mtf managed POSIX MT-safe FIFO queue and all of its consumer names using elog_notify and prepend pre onto each line of output

<subsection MT-Safe Computational Threading>
<cdeclarations>
Pmtcomp *pmtcomp_create ()
    create a  MT-safe computational thread object

long pmtcomp_destroy (Pmtcomp *mtc)
    destroy the mtc MT-safe computational thread object by killing and joining any running threads and freeing all resources

long pmtcomp_addthread (Pmtcomp *mtc, long (*comp_sub) (long ioffset, long number, void *user_data), long ioffset, long number, void *user_data)
    add a new computational thread to the mtc MT-safe computational thread object with comp_sub callback proceedure for doing the computations and with ioffset, number, user_data arguments for the callback proceedure

long pmtcomp_setthread (Pmtcomp *mtc, long index, long (*comp_sub) (long ioffset, long number, void *user_data), long ioffset, long number, void *user_data)
    reset computational thread parameters for the mtc MT-safe computational thread object for thread index with comp_sub callback proceedure for doing the computations and with ioffset, number, user_data arguments for the callback proceedure

long pmtcomp_deletethread (Pmtcomp *mtc, long index)
    delete the computational thread index for the mtc MT-safe computational thread object by killing and joining the thread and freeing all thread resources

long pmtcomp_nthreads (Pmtcomp *mtc)
    return the number of computational thread associated with the mtc MT-safe computational thread object

long pmtcomp_processthreads (Pmtcomp *mtc)
    make one processing pass through the computational threads for the mtc MT-safe computational thread object

<subsection Data Grid Utility>
<cdeclarations>
BUGrid *bugrid_create (char *grid_type, long nxgrid, float *xgrid_coords, char *xgrid_type, char *xgrid_units, long nygrid, float *ygrid_coords, char *ygrid_type, char *ygrid_units, char *data_type, char *data_units, char *tag, char *handle)
    create a data grid object with type grid_type, with nxgrid X-coordinates in xcoords of type xgrid_type and units xgrid_units, with nygrid Y-coordinates in ycoords of type ygrid_type and units ygrid_units, with dependent variable data of type data_type and units data_units, with a tag name, tag, and return a handle name in handle

BUGrid *bugrid_get_grid (char *handle)
    get the data grid object with handle name handle

long bugrid_register_grid (BUGrid *grid, char *handle)
    register the grid data grid object to handle name handle

long bugrid_free (char *handle)
    free the data grid object with handle name handle

void bugrid_free_bugrid (BUGrid *grid)
    free the grid data grid object

long bugrid_free_tag (char *tag)
    free the data grid object with tag tag

BUGrid *bugrid_copy (char *in_handle, char *tag, char *handle)
    copy the data grid object with handle name in_handle, give at a tag name, tag and return a handle name in handle

long bugrid_put(char *handle, double time, long nsamps, double dt, float *data)
    put dependent variable data, data, with start time, number time samples nsamps, time increment dt, into the data grid object with handle name handle

long bugrid_put_bugrid(BUGrid *grid, double time, long nsamps, double dt, float *data)
    put dependent variable data, data, with start time, number time samples nsamps, time increment dt, into the grid data grid object

long bugrid_eval (char *handle, long isamp, long nxys, float *x, float *y, char *interp_mode, char *extrap_mode, float **out, long *out_size)
    evaluate grid using the data grid object with handle name handle for time sample isamp, for the nxys arrays of independent X and Y coordinates in x and y, using interp_mode grid interpolation mode, extrap_mode grid extrapolation mode and put the results into out with size out_size

long bugrid_eval_bugrid (BUGrid *grid, long isamp, long nxys, float *x, float *y, char *interp_mode, char *extrap_mode, float **out, long *out_size)
    evaluate grid using the grid data grid object for time sample isamp, for the nxys arrays of independent X and Y coordinates in x and y, using interp_mode grid interpolation mode, extrap_mode grid extrapolation mode and put the results into out with size out_size

long bugrid_order_bugrid (BUGrid *grid)
    order all data and coordinates for grid data grid object

long bugrid_stuff (char *handle, char **packet, int *nbytes, int *packetsz)
    stuff the ORB packet with nbytes bytes and size packetsz from the data grid object with handle name handle

long bugrid_stuff_bugrid (BUGrid *grid, char **packet, int *nbytes, int *packetsz)
    stuff the ORB packet with nbytes bytes and size packetsz from the grid data grid object

long bugrid_unstuff (char *packet, int nbytes, BUGrid **grid)
    unstuff the ORB packet with nbytes bytes into the grid data grid object

long bugrid_coords_d2slow (long nds, float *xcoords, float *ycoords, char *method, char *model, char *phase_code, float sdepth, float gap_value)
    perform a mapping of nds distance and azimuth values, in xcoords and ycoords, into Cartesian slowness values, in xcoords and ycoords, using travel time method, model, phase phase_code, source depth sdepth, and use gap_value to flag undfined output values in the mapping

long bugrid_eval_d2slow (char *handle, long isamp, long nds, float *distances, float *azimuths, char *method, char *model, char *phase_code, float sdepth, char *interp_mode, char *extrap_mode, float **out, long *out_size)
    evaluate a Cartesian slowness grid using the data grid object with handle name handle for time sample isamp, by mapping the nds distances-azimuths into Cartesian slowness values, using travel time method, model, phase phase_code, source depth sdepth, using interp_mode grid interpolation mode, extrap_mode grid extrapolation mode and put the results into out with size out_size

long bugrid_eval_d2slow_bugrid (BUGrid *grid, long isamp, long nds, float *distances, float *azimuths, char *method, char *model, char *phase_code, float sdepth, char *interp_mode, char *extrap_mode, float **out, long *out_size)
    evaluate a Cartesian slowness grid using the grid data grid object for time sample isamp, by mapping the nds distances-azimuths into Cartesian slowness values, using travel time method, model, phase phase_code, source depth sdepth, using interp_mode grid interpolation mode, extrap_mode grid extrapolation mode and put the results into out with size out_size

long bugrid_maxmin(char *handle, long isamp, float *xmin, float *xmax, float *ymin, float *ymax, float *zmin, float *zmax)
    determine xmin, xmax, ymin, ymax, zmin, zmax maximum and minimum values for the independent and dependent data for the data grid object with handle name handle for time sample isamp

long bugrid_maxmin_bugrid(BUGrid *grid, long isamp, float *xmin, float *xmax, float *ymin, float *ymax, float *zmin, float *zmax)
    determine xmin, xmax, ymin, ymax, zmin, zmax maximum and minimum values for the independent and dependent data for the grid data grid object

<subsection Time History Utility>
<cdeclarations>
BUHistory *buhistory_create(int maxnp, char *tag, char *filename, char *handle)
    create a time history object with maxnp maximum number of points

int buhistory_free (char *handle)
    free a time history object referenced by handle

int buhistory_free_tag (char *tag)
    free a time history object referenced by tag

void buhistory_free_history (BUHistory *history)
    free a time history object with pointer history

BUHistory *buhistory_get_history (char *handle)
    get the time history object pointer corresponding to handle

int buhistory_add(char *handle, double time, double value)
    add a time-value point to a time history

int buhistory_get_points (char *handle, int *npts, double **tpts, double **ypts)
    get all of the time-value points from a time history

int buhistory_eval(char *handle, double time, double *value)
    evaluate a time history at time

int buhistory_maxmin (char *handle, double *tmin, double *tmax, double *vmin, double *vmax)
    get the minimum and maximum time and data ranges for a time history

<subsection Sac Utility>
<cdeclarations>
BUSac * busac_create (char *tag, char *handle)
    create an empty sac file image object

BUSac * busac_read_from_file_busac (char *filename, char *tag, char *handle)
    read sac file filename and make a sac file image object from it

BUSac * busac_get_busac (char *handle)
    get the sac file image object pointer corresponding to handle

void busac_free_busac (BUSac *busac)
    free a sac file image object using object pointer

long busac_free (char *handle)
    free a sac file image object using object handle

long busac_free_tag (char *tag)
    free a sac file image object using object tag

long busac_puthdr_busac (BUSac *busac, ...)
    fill in sac file image header values

long busac_gethdr_busac (BUSac *busac, ...)
    get sac file image header values

long busac_putdata_busac (BUSac *busac, int nsamp, double tstart, double samprate, float *data, char *segtype)
    fill in sac file image waveform data

long busac_getdata_busac (BUSac *busac, int *nsamp, double *tstart, double *samprate, float **data, char *segtype)
    get sac file image waveform data

long busac_getreftime_busac (BUSac *busac, double *rtime)
    get sac file image reference time

long busac_putevent_busac (BUSac *busac, Dbptr dbtrace, Dbptr dborigin)
    fill in sac file image header and waveform data from event information in dborigin and dbtrace

long busac_getevent_busac (BUSac *busac, Dbptr *dbtrace, Dbptr *dborigin)
    get sac file image header and waveform data and put into dborigin and dbtrace

long busac_write_to_file_busac (BUSac *busac, char *filename)
    write a sac file image object into a file filename

<subsection Vector Utility>
<cdeclarations>
BUVector * buvector_create (int nx, int ny, char *tag, char *handle)
    create a vector object with nx X-values and ny Y-values

int buvector_free (char *handle)
    free a vector object referenced by handle

int buvector_free_tag (char *tag)
    free a vector object referenced by tag

void buvector_free_vector (BUVector *vector)
    free a time history object with pointer vector

BUVector *buvector_get_vector (char *handle)
    get the vector object pointer corresponding to handle

BUVector *buvector_read(char *fname, char *tag, int line_off, int xpos, int ny, int *ypos, int lpos, char *handle)
    create a vector object and fill it by reading an ASCII file

BUVector *buvector_create_tsamp (int nsamp, double time, double samprate, double *data, char *tag, char *handle)
    create a vector object and fill it from a time series waveform

BUVector *buvector_create_response_fap (char *filename, char *tag, char *handle, int *err)
    create a vector object and fill it from a instrument response file

int buvector_resize (char *handle)
    resize a vector object

BUVector *buvector_copy (char *in_handle, char *tag, char *handle)
    copy a vector object

int buvector_append(char *handle, int index, double x, double *y, char *label)
    append to a vector object

int buvector_puty(char *handle, int index, double *y, char *label)
    replace a point in a vector object

int buvector_get_point(char *handle, int index, double *x, double *y, char *label)
    get all of the data for a single point in a vector object

int buvector_get_points (char *handle, int *npts, int *ny, double **xpts, void *vypts, char ***labels)
    get all of the data for a all of the points in a vector object

int buvector_eval(char *handle, double x, double *y)
    evaluate a vector object at X-value x

int buvector_maxmin(char *handle, int iy, double *xmin, double *xmax, double *ymin, double *ymax)
    get the minimum and maximum ranges for a vector object

int buvector_transform_edp (char *handle, double lonr, double latr)
    transform a vector object into equal distance map projection coordinates
