<chapter Perl Datascope Interface>
<info>
use Datascope ; 
</info>
<man>
% man perldb
</man>

<subsection Opening a Database>
<function>

dbopen (database, permissions)
    return database pointer to the database

dbopen_database (database, permissions)
    open database (or database.table or "-" for view from stdin), return database pointer

dbopen_table (database.table, permissions)
    open database.table (or "-" for view from stdin), return database pointer 

dbcreate(filename, schema, dbpath, desc, detail)
    create database descriptor file filename with specified schema, dbpath, desc and detail

dbtmp(schema)
    return database pointer to temporary database with specified schema

dbclose (@db)
    close the database, freeing all resources 

dbfree (@db)
    free resources for table or database

dblookup (@db, database, table, field, row)
    return database pointer for the specified database, table, field, and row.

<subsection Manipulating Fields and Records>
dbadd (@db [, record])
    add the new record to the table in @db. If record is not specified, add the scratch record. return the new row number, or an error code < 0.

dbaddnull (@db)
    add null row to table

dbaddv (@db, field_name, value, [field_name, value, ...])
    add new row with the specified values to table

dbaddchk (@db[, record]) 
    Attempt to add new record, first checking for conflict, like dbaddv

dbmark (@db)
    set the specified rows to all null values

dbdelete (@db)
    delete row from the database

dbcrunch (@db)
    delete all marked (null) rows from the specified table

dbtruncate (@db, n)
    truncate table to specified number of rows

dbdestroy (@db)
    delete all tables and the descriptor file for the specified database, but not external files


dbget (@db [, 0])
    return [or copy to the scratch row] the specified field or row 

dbgetv (@db, field_name [, field_name, ...])
    return values of the specified fields for @db

dbput (@db [, string])
    copy from scratch row [or from string] to specified field or row

dbputv (@db, field_name, value [, field_name, value, ...])
    save values into the specified fields for row @db

dbadd_remark (@db, remark)
    add comment in remark table for row @db

dbget_remark (@db)
    get any comment from remark table for row @db


<subsection Forming Views>
dbgroup (@db, key [, key, ...])
    group the input table according to the specified keys

dbjoin (@db1, @db2 [, join-keys])
    return join of the two tables, using the join-keys if specified

dbmatches (@db1, @db2, hookname [, join-keys])
    return list of rows in db2 which match row @db1

dbnojoin (db1, db2 [, join-keys])
    return view of all rows in view @db1 which don't join to @db2

dbprocess (@db, commands)
    return new view which is the result of applying the dbprocess
    commands to the input view; possible operations are: dbopen,
    dbjoin, dbgroup, dbleftjoin, dbnojoin, dbselect, dbseparate,
    dbsever, dbsort, dbsubset, dbtheta, dbungroup

dbseparate (@db, table)
    return new view which consists of all the rows of the
    specified table which participate in the joined view @db

dbsever (@db, table)
    return new view which consists of all the unique rows left
    after removing the specified table from joined view @db

dbsort (@db [, -u][, -r][, key, key..])
    sort the input table according to the specified keys, uniquely if -u, 
    in reverse order if -r 

dbselect (@db, expr[, expr[, expr..]])
    print table of expressions from view

dbselect_hdr (@db, expr[, expr[, expr..]])
    print headers for expressions

dbsubset (@db, expression)
    return new view which is the set of all rows which satisfy the expression

dbtheta (@db1, @db2, [expression])
    return new join view with all combinations of rows from the two tables which 
    satisfy expression, or all combinations if no expression is specified

dbunjoin (@db, database)
    create new database, containing all the records referenced in the input view @db


dbsave_view (@db, name)
    save the view into file named database.name

<subsection Miscellaneous Datascope Functions>
dbquery (@db, code)
    query the database for information, e.g. dbquery(@db, dbRECORD_COUNT). see 
    Datascope Constants for valid query codes.

dbex_eval (@db, expression)
    evaluate expression for particular row

dbcompile (@db, string)
    add new attributes or relations to the schema directly from the perl script

dbextfile (@db [, base-table])
    return the filename for an external file for particular row in view

dbnextid (@db, id_name)
    gets the next free id value for the specified database and id_name

dbstrtype (@db, string)
    classifies string, returning "strREAL", "strINTEGER", "strNULL", "strSTRING", 
    "strTIME", "strFIELD", "strEXPR", or "strUNKNOWN"

dbfind (@db, string [, first [,reverse]])
    find first row matching expression, starting with first; if reverse, search backwards 

dbinvalid()
    return database pointer of dbINVALID

dbget_range(@bundle)
    returns start, end of range for bundle db pointer

dbbase(@db[, table])
    returns base table database pointer corresponding to record @db

<subsection Waveforms>
trsample(@db, $t0, $t1, $sta, $chan[, $apply_calib])
    fetch waveform data from table @db for
    $sta/$chan between $t0 and $t1. returns time/value pairs 
    If $apply_calib is non-zero, calib is applied.

trloadchan(@db, $t0, $t1, $sta, $chan)
    load data for $sta/$chan between time $t0 and $t1.  
    returns database pointer to trace table.

trcreate($sta, $chan, $time, $nsamp, $samprate)
    create a temporary trace database with single row of 
    $sta, $chan, $time, $nsamp, and $samprate

trcopy(@dbout, @dbin)
    returns a temporary copy of a trace database table,
    possible appending to an existing table

trdata(@db[, $i0[, $npts]])
    returns $npts data points starting at $i0 from trace table record @db

trputdata(@db, @data)
    logical inverse of trdata: puts @data that has changed into
    array referenced by @db

trsplit(@tr)
    eliminate marked gaps inside the trace table @tr by splitting
    segments containing marked values

trsplice(@tr)
    glue together segments (if possible) in trace table
    @tr, eliminating overlapping segments.

trfilter(@tr, filter)
    apply specified filter to the traces; see trfilter(3)

trfree(@tr)
    free trace table memory.

trlookup_segtype(char)
    return units and description for segtype char


<subsection Error Handling>
elog_init ($0, @ARGV)
    initialize the elog message routines

elog_log (msg)
    save message on the elog message log

elog_debug (msg)
elog_notify (msg)
elog_alert (msg)
elog_complain (msg)
    send debug, notify, alert, complain message to the elog facility

elog_die (msg)
    send message to the elog message facility and die


elog_callback(replacement)
    replace standard elog processing with perl routine
    replacement is called with two arguments: severity  code
    and a string containing the elog log.  it must return an
    integer; if return != 0, error log is cleared.

elog_string (n)
    return error log starting with message n

elog_clear ()
    clear the elog message log


elog_mark ()
    return the count of messages currently held in the error log

elog_flush (deliver, first)
    eliminate log messages after first, printing them if deliver is set

<subsection Parameter Files>
pfget (pfname, key)
    return the value for the key from the parameter file pfname

pfget_boolean (pfname, key)
    return 0 or 1 depending on the value of key in the parameter file pfname

pfget_size (pfname, key)
    returns number corresponding to key in parameter file pfname, allowing suffix G, M, k, m or u.

pfget_time (pfname, key)
    return epoch time corresponding to key in parameter file pfname, using str2epoch

pfupdate (pfname)
    check and reread parameter file if file used along PFPATH changed

pffiles (pfname [, all]) 
    return list of file which make up parameter file object.
    If all is specified, return all possible filenames, including non-existent files.

pf2string(pfname)
    return string representation of the parameter file object pfname

pfnew(pfname)
    create a new empty parameter file object with name pfname

pfcompile (string, pfname)
  convert the specified string into parameter file object name pfname.
 
pfput (key, value, pfname)
    save the specified value into the pf object  with  name
    pfname under the specified key.  The value is converted
    to string if it's scalar; when it's a reference to
    a perl array or hash, the entire perl array or hash is
    stored in the pf object.

pfwrite (filename, pfname)
    write out pf object pfname to filename

pfrequire(pfname, atime)
    require pf_revision_time from last file pfname is later than atime.

pfdel (pfname, key)
    delete named key from pf object pfname

<subsection Special functions>
ask (string)
    pose question string at the controlling tty, and return the response

askyn (string)
    like ask, but require yes/no answer; return 0=false, 1=true

askynaq (string)
    like ask, but require yes/no/all/quit answer; return 
    0=false, 1=true, 2=all, 3=quit

yesno (s) 
    return -1 if $s =~ /yes|ok|y|true|1|on|t/i, 0 if $s =~ /no|n|false|0|off|f/i, 1 otherwise

datafile (env, file)
    find the specified file by looking first at the environment variable, then along the path

datapath (env, dir, file, suffix)
    find the specified file by looking first at the environment variable, then along the path

makedir(d)
    make the complete directory path d (like "mkdir -p") 

abspath (a)
    return the absolute path to the specified file a.

relpath (d, t)
    return relative path from directory f to t 

cleanpath (p [, nolinks])
    normalize the input path p, removing extra "..", "//", and
    "./" strings. With second argument,
    resolve any symbolic links along the path.

concatpaths (a,b)
    concatenate the two paths a and b properly, adding a
    slash if necessary.

parsepath (a)
    return directory, file basename, and suffix for path a.

close_descriptors()
    close all file descriptors after stderr; useful after fork

strsignal (code)
    return name for signal, given the integer code

is_nfs (path)
    return true if path is on an nfs-mounted filesystem.

limit (resource, [limit2set])
    return the current resource limit, or set new resource limit; possible
    resources are:
<example>
cputime      filesize     datasize      
stacksize    coredumpsize vmemoryuse    
</example>

grn (lat, lon)
    return the geographic region number

grname (lat, lon)
    return the geographic region name

srn (lat, lon)
    return the seismic region number

srname (lat, lon)
    return the seismic region name

sgsign(signer,data)
    returns signature for specified signer and data

sgverify(signer,data,signature)
    returns zero if signature is correct for signer and data

($out, $units)=units_convert(input,want)
    returns value and units for specified input and requested units

@list=units_match(input)
    returns list of units matching input

$errno=errno()
    returns system errno, resetting errno to zero

($result, $restriction) = legit_ip(pf,ip)
    checks ip address in valid_ip_addresses list from pf, returns 1
    for legitimate ip, -1 if no parameter file, 0 if invalid ip

<subsection Simple Ring Buffers>

openring(filename, id, depth, flags) ;
    open or create new simple ring buffer in filename with 
    (up to) 64 byte id field, maximum depth entries. if flags & 1 is
    set, open read-only, no locking; otherwise ring buffer must be
    on local filesystem. return handle to ring buffer.

newring(filename, id, depth, flags) ;
    create new simple ring buffer like openring, overwriting any old ring buffer

closering(rb)
    close specified ring buffer
    
pushring(rb, time, value)
    add time/value pair to ring (in time order)

cramring(rb, time, value, "collapse") 
    add time/value pair to ring according to algorithm collapse

getring(rb, i)
    return the i'th time/value pair from the ring; 
    0 is the most recent pair

avgring(rb, tdelta)
    return the average value in the ring rb for the latest
    tdelta seconds in the ring

minring(rb, tdelta)
    return the min value and the corresponding index in the ring 
    rb for the latest tdelta seconds in the ring

maxring(rb, tdelta)
    return the max value and the corresponding index in the ring 
    rb for the latest tdelta seconds in the ring

changedring(rb, tdelta) 
    returns 1 if ring buffer values have changed in past tdelta seconds
    
countring(rb)
    return the number of time/value pairs in the ring

findring(rb, value, tdelta)
     findring searches the ring buffer rb over the specified time
     period tdelta for the specific value.

meanring(rb, tdelta) ;
    returns #pts, mean and standard deviation for latest tdelta seconds

linearfitring($rb, $tdelta) 
    returns #pts, slope, y-intercept and correlation coefficient for latest tdelta seconds

<subsection Time Conversion>

now()
    return current time to (usually) microseconds accuracy

is_epoch_string (string)
    return epoch time unless string is invalid; then returns undef and error message.

epoch2str (epoch, fmt [, timezone])
    return the epoch time formatted according to the fmt string and converted to timezone

str2epoch (string)
    return the epoch time corresponding to the free-form input time/date


strtime (epoch)
    return epoch time formatted like "4/23/2001  15:35:15.000"

strydtime (epoch)
    return epoch time formatted like "4/23/2001 (113) 15:35:15.000"

strdate (epoch)
    convert epoch time to date, eg "4/23/2001"

strtdelta (dt)
    convert the time-difference dt (in seconds) to string, eg "30:35 minutes"

strlocaltime (epoch)
    return epoch time formatted like "4/23/2001  15:35:15.000" in local timezone

strlocalydtime (epoch)
    return epoch time formatted like "4/23/2001 (113) 15:35:15.000" in local timezone

strlocaldate (epoch)
    convert epoch time to date, eg "4/23/2001" in local timezone


epoch (yearday)
    return the epoch time corresponding to the integer yearday

yearday (epoch)
    return the yearday corresponding to an epoch time

wait_for_time(time,verbose)
    wait for specified time

<subsection Coordinate Transormations>

r3mag(@x)
    returns the magnitude of a 3-vector

r3dot(@x)
    returns the dot product of two 3-vectors

r3norm(@x)
    returns the normalized 3-vector  

r3cross(@x,@y)
    returns the cross product of two 3-vectors 

r3orthonormal(@x,@y)
    returns the unit vector perpendicular to @x in the direction of @y 

deg(radians)
rad(degrees)
    conversions between degrees and radians

dist(lat1,lon1,lat2,lon2)
    returns distance and azimuth from lat1,lon1 to lat2,lon2

latlon(lat1,lon1,delta,azimth)
    returns lat and lon for point distance and azimuth from lat1,lon1 to lat2,lon2

rotation(@axis,@vector,$theta)
    returns vector rotated about axis by theta radians

<subsection State Files>

exhume(filename,reference,seconds)
    specify filename of state file, reference to variable to be set when
    interrupted, and number of seconds to wait for program to terminate

resurrect(name, ref[, TIME_RELIC])
    select names and references to perl variables to save in state file. 
    (Optionally specify the type, may be useful for epoch times)

bury()
    Save the state file.

<subsection Foreign Keys>
<body>
map between CSS3.0 station/channel naming  conventions  and  the
different conventions of autodrm and SEED.
</body>
<function>

$sta = map_autodrm_netsta($anet, $fsta)
$chan = map_autodrm_chanaux($sta,$fchan,$aux)
($anet, $fsta) = autodrm_net($sta)
($fchan, $aux) = autodrm_aux(sta, chan)

$sta = map_seed_netsta($anet, $fsta)
$chan = map_seed_chanloc($sta,$fchan,$loc)
($snet, $fsta) = seed_net($sta)
($fchan, $loc) = seed_loc($sta,$chan)

finit_db(@db) 
    cause foreign key routines above to use specified database @db

<chapter Perl Orb Access>
<info>
use orb; 
</info>
<man>
% man perlorb
</man>
<function>

orbopen(name, perm)
    open the specified orbserver name with permission perm ("r", "w", "r&", or "w&"), returning the open file descriptor orb

orbclose(orb)
    close an orbserver connection

orbselect(orb, re)
    select packets with sourcenames which match the regular expression re.

orbreject(orb, re)
    reject packets with sourcenames which match the regular expression re.

orbseek(orb, which)
    position the orb connection packet pointer according to which;
    which may be an explicit pktid, or "ORBCURRENT", "ORBPREV",
    "ORBNEXT", "ORBNEXT_WAIT", "ORBOLDEST", or "ORBNEWEST".

orbposition(orb, from)
    position the orb connection packet pointer according to
    from; from may be "newest", "oldest", or any (UTC) time string
    recognized by str2epoch(3).

orbtell(orb)
    return the current orb connection position (pktid).

orbafter(orb, time)
    position the orb connection packet pointer to the first
    packet after the specified time. Time must be UTC
    epoch time in seconds, not string.

orbresurrect(orb, \\$pktid, \\$pkttime)
    restore orb position from state, save to state when bury is called

orbping(orb)
    test if the specified orb responds; return version number.

orbwait(orb, re, mintime, timeout)
    wait for all reading clients of orb with program
    name which matches the regular expression re to have
    read packets younger than mintime. If timeout is
    non-zero, then orbwait return with an error code
    if the timeout expires before the specified program
    catches up.

($pktid, $srcname, $pkttime, $pkt, $nbytes) = orbget(orb, which)
    get single packet corresponding to which; this can be an
    explicit pktid, or "ORBCURRENT", "ORBPREV", "ORBNEXT",
    "ORBNEXT_WAIT", "ORBOLDEST", or "ORBNEWEST". 

($pktid, $srcname, $pkttime, $pkt, $nbytes) = orbreap(orb)
    get the next packet from the orb; this is the fastest,
    most efficient way of reading packets.

($pktid, $srcname, $pkttime, $pkt, $nbytes) = orbreap_timeout(orb, maxseconds)
    get the next packet from the orb, but return early if
    no packets have appeared in maxseconds. In this case,
    the returned pktid will be undef.

($pkttime, $pkt, $nbytes) = orbgetstash(orb, srcname)
    get stash packet corresponding to srcname

orbpkt_string(srcname, time, packet, nbytes)
    return forb(5) string representation of packet

orbput(orb, srcname, pkttime, pkt, nbytes)
    put the specified packet onto the orb.

orbput_nolag(orb, srcname, pkttime, pkt, nbytes, lagparams)
    put the specified packet onto the orb, ensuring that
    no client matching the parameters in lagparams pf is too
    far behind

orbputx(orb, srcname, pkttime, pkt, nbytes)
    put the specified packet onto the orb, with return acknowledgement

orbstashselect(orb,select)
    set the stash select parameter

($name, $content, $desc) = suffix2pkttype(suffix)
    return name, content and description for packet type suffix.

orbstat(orb)
    Get the standard status values from the orb; this
    return an object with the following methods:
<example>
address     closes      connections 
errors      host        maxdata     
maxpkts     maxsrc      messages    
nclients    nsources    opens       
orb_start   pid         port        
rejected    started     version     
when        who         
</example>

($when, @clients) = orbclients(orb)
    $when is scalar; @clients is list of client
    objects, one object per client. Each object has the
    following methods:
<example>
address     and         bytes       
errors      fd          host        
lastpkt     lastrequest mymessages  
nreads      nreject     nrequests   
nselect     nwrites     packets     
perm        pid         pktid       
port        priority    read        
reject      select      started     
thread      what        who         
</example>

($old,$new,$max,$range,@laggards)=orblag(orb,match,reject)
    returns oldest, newest, and pktid range, with list of clients
    matching match/reject parameter. Each element of list contains
    client lag, thread, who and what

orbsources(orb)
    return ($when, @sources). $when is scalar; @sources is list of source
    objects,  one  object  per source.  Each object has the
    following methods:
<example>
active       and          nbytes       
npkts        slatest      slatest_time 
soldest      soldest_time srcname      
</example>

showPkt(srcname, pkttime, pkt, nbytes, mode)
    print out packet summary, depending on mode:
<example>
1	hex dump
2	unstuff, print all data samples
3	unstuff, print no data samples
4	just show the header information
</example>

unstuffPkt(srcname, pkttime, pkt, nbytes)
    unstuffPkt unstuffs the input packet, returning packet kind and packet object.
    the result code indicates what kind of packet was unpacked:
<example>
kind    kind of packet
----    --------------
Pkt_wf  waveform packet
Pkt_st  status packet
Pkt_db  database row
Pkt_pf  parameter file
Pkt_cn  control messages
Pkt_rw  binary data
Pkt_ch  character string
Pkt_tp  test packet
</example>
    The packet object has the following methods which return various
    values from the c Packet structure: parts, time, PacketType,
    nchannels, channels(i), pf, string, db, dfile,
    and version.

    The parts method returns (net, sta, chan, loc, suffix, subcode)

    The PacketType method returns the packet kind (also
    returned by unstuffPkt) and the corresponding description.

    The channels method takes an index (0..n-1) argument 
    and returns channel object with its own methods:
<example>
calib    calper   chan     cuser1   
cuser2   data     duser1   duser2   
iuser1   iuser2   iuser3   loc      
net      nsamp    samprate segtype  
sta      time     
</example>
    The data method returns all the waveform data in list of integers.

split_srcname(srcname)
    return net, sta, chan, loc, suffix, and subcode corresponding to srcname

join_srcname(net, sta, chan, loc, suffix, subcode)
    return srcname for net, sta, chan, loc, suffix and subcode


<chapter Perl System Information >
<info>
use sysinfo ; 
</info>
<man>
% man perlsysinfo
</man>
<function>

my_ip()
    return ip address (eg, 207.174.76.135)

my_os()
    return os name (eg, SunOS)

my_hardware()
    return hardware string (eg, sun4u)

my_hostname()
    return hostname (eg, ament)

ip(dot-notation)
    return integer corresponding to dot-notation

ip2name(ip)
    looks up hostname for ip address

name2ip(hostname)
    looks up ip address for hostname

nomem(address,n)
    return first bad address if no memory in range address to address + n 

%sysmem = sysmem()
     return physical memory, total swap space, and swap used

%loadavg = sysloadavg()
     return nproc, avg1m, avg5m, and avg15m: number of processes and 15, 5 and 1 minute load averages 

@mounted = sysmounted() 
    return list of mounted partitions; each element has mount point, filesystem type,
    and remote host and directory 

pidcmdline(pid)
    return command line for specified pid

pidpwd(pid)
    return working directory for process pid

pidexecname(pid)
    return executable name for specified pid

%info = pidinfo(pid)
    return usage in percent, parent pid, user id, size in kilobytes,
    resident set size in kilobytes, run state, epoch start time, total cpu time,
    and total children cputime for process pid

$exists = pid_exists($pid)
    returns 1 if $pid exists
   
%statvfs = statvfs (path)
    return Mb_total, Mb_avail, inodes_avail, inodes_used on disk
    containing path, % disk and inodes used, and unique id

($ncpu, $idle, $user, $kernel, $iowait, $swap, @othercpus) = syscpu() ;
    return number of cpus, and idle, user, kernel, iowait and swap time 
    for each cpu.

$cwd = getcwd()
    return current working directory

 
