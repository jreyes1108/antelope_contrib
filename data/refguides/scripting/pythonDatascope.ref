<chapter Python Datascope Interface>
<info>
from antelope.datascope import *
</info>
<man>
% man pythondb
</man>

<subsection Opening a Database>
<pythonfunction>

dbopen (dbname, perm = 'r')
Dbptr(dbname, perm = 'r')
    return database pointer to the database

Dbptr()
    create a database pointer filled with dbINVALID values

Dbptr(list)
    create a database pointer from a list or another Dbptr
 
dbcreate(filename, schema, dbpath = None, description = None, detail = None)
    create database descriptor file filename with specified schema, dbpath, desc and detail

dbtmp(schema)
     return database pointer to temporary database with specified schema

dbclose (db)
db.close ()
    close the database, freeing all resources 

dbfree (db)
db.free ()
    free resources for table or database

dblookup (db, database = "", table = "", field = "", row = "")
db.lookup (database = "", table = "", field = "", row = "")
    return database pointer for the specified database, table, field, and row.

<subsection Manipulating Fields and Records>
dbaddnull (db)
db.addnull ()
    add null row to table

dbaddv (db, *args)
db.addv (*args)
    add new row with the specified values to table

dbmark (db)
db.mark ()
    set the specified rows to all null values

dbdelete (db)
db.delete ()
    delete row from the database

dbcrunch (db)
db.crunch ()
    delete all marked (null) rows from the specified table

dbtruncate (db, n)
db.dbtruncate (db, n)
    truncate table to specified number of rows

dbdestroy (db)
db.dbdestroy ()
    delete all tables and the descriptor file for the specified database, but not external files

 
dbget (db, scratch = None)
db.get (scratch = None)
    return [or copy to the scratch row] the specified field or row 

dbgetv (db, *args)
db.getv (*args)
    return values of the specified fields for db

dbput (db, record = None)
db.put (record = None)
    copy from scratch row [or from string] to specified field or row

dbputv (db, *args)
db.putv (*args)
    save values into the specified fields for row db

<subsection Forming Views>
dbgroup (db, groupfields, name = None, type = 1)
db.group (groupfields, name = None, type = 1)
    group a sorted input table according to the specified keys

dbungroup (db, name = None)
db.ungroup (db, name = None)
    ungroup a grouped table

dbjoin (db1, db2, outer = False, pattern1 = None, pattern2 = None, name = None)
db.join (db2, outer = False, pattern1 = None, pattern2 = None, name = None)
    return join of the two tables, using the join-keys if specified. db2 may be a database pointer or name of a table.

dbmatches (db1, db2, hookname, kpattern = None, tpattern = None)
db.matches (db2, hookname, kpattern = None, tpattern = None)
    return list of rows in db2 which match row db1

dbnojoin (db1, db2, outer = False, pattern1 = None, pattern2 = None, name = None)
db.nojoin (db2, outer = False, pattern1 = None, pattern2 = None, name = None)
    return view of all rows in view db1 which don't join to db2. db2 may be a database pointer or table name

dbprocess (db, commands)
db.process (commands)
    return new view which is the result of applying the dbprocess
    commands to the input view; possible operations are: dbopen,
    dbjoin, dbgroup, dbleftjoin, dbnojoin, dbselect, dbseparate,
    dbsever, dbsort, dbsubset, dbtheta, dbungroup

dbseparate (db, table)
db.separate (table)
    return new view which consists of all the rows of the
    specified table which participate in the joined view db

dbsever (db, table, name = None)
db.sever (table, name = None)
    return new view which consists of all the unique rows left
    after removing the specified table from joined view db

dbsort (db, keys, unique = False, reverse = False, name = None)
db.sort (keys, unique = False, reverse = False, name = None)
    sort the input table according to the specified key

dbsubset (db, expression, name = None)
db.subset (expression, name = None)
    return new view which is the set of all rows which satisfy the expression

dblist2subset (db, list = None)
db.list2subset (list = None)
    convert a list of records to a database subset

dbtheta (db1, db2, expression, outer = False, name = None)
db.theta (db2, expression, outer = False, name = None)
    return new join view with all combinations of rows from the two tables which 
    satisfy expression, or all combinations if no expression is specified. db2
    may be a database pointer or name of a table

dbunjoin (db, database, rewrite = False)
db.unjoin (database, rewrite = False)
    create new database, containing all the records referenced in the input view db


<subsection Miscellaneous Datascope Functions>
dbquery (db, code)
db.query (code)
    query the database for information, e.g. dbquery(db, dbRECORD_COUNT). see 
    Datascope Constants for valid query codes.

dbnrecs (db)
db.nrecs ()
    retrieve number of records in a database view

dbex_eval (db, expression)
db.ex_eval (expression)
    evaluate expression for particular row

dbextfile (db, tablename = None)
db.extfile (tablename = None)
    return the filename for an external file for particular row in view

dbfilename (db)
db.filename ()
    return the filename for a database record

trwfname (db, pattern)
db.trwfname (pattern)
    generate waveform file names

dbnextid (db, id_name)
db.nextid (id_name)
    gets the next free id value for the specified database and id_name

dbfind (db, string, first = -1, reverse = False)
db.find (string, first = -1, reverse = False)
    find first row matching expression, starting with first; if reverse, search backwards 

db2xml (db, rootnode = None, rownode = None, fields = None, expressions = None, primary = False)
db.xml (rootnode = None, rownode = None, fields = None, expressions = None, primary = False)
    convert a database view to XML

dbinvalid()
db.invalid()
Dbptr()
    return database pointer of dbINVALID

<subsection Instrument Response Routines>
Response(filename)
    return a response object representing the response curve in filename

eval_response (resp, omega)
resp.eval (omega)
    evaluate a response object at an angular frequency

<subsection Waveforms>
trsample(db, t0, t1, sta, chan, apply_calib = False)
db.sample(t0, t1, sta, chan, apply_calib = False)
    fetch waveform data from table db for
    sta/chan between t0 and t1. returns time/value pairs 
    If apply_calib is True, calib is applied.

trsamplebins(db, t0, t1, sta, chan, binsize, apply_calib = False)
db.samplebins(t0, t1, sta, chan, binsize, apply_calib = False)
    fetch waveform data from table db for
    sta/chan between t0 and t1. returns time/min/max triplets 
    for each bin.  If apply_calib is True, calib is applied.

trloadchan(db, t0, t1, sta, chan)
db.loadchan(t0, t1, sta, chan)
    load data for $sta/$chan between time t0 and t1.  
    returns database pointer to trace table.

trcopy(tr, trout = None)
tr.trcopy(trout = None)
    returns a temporary copy of a trace database table,
    possible appending to an existing table

trdata (tr)
tr.data ()
    returns data points from trace table record tr

trdatabins (tr, binsize)
tr.databins (binsize)
    returns binned data points from trace table record tr

trsplit(tr)
tr.split()
    eliminate marked gaps inside the trace table tr by splitting
    segments containing marked values

trsplice(tr)
tr.splice()
    glue together segments (if possible) in trace table
    tr, eliminating overlapping segments.

trfilter(tr, filter)
tr.filter(filter)
    apply specified filter to the traces; see trfilter(3)

trtruncate(tr, leave)
tr.trtruncate(leave)
    truncate a tr database table

trfree(tr)
tr.trfree()
    free trace table memory.

trdestroy(tr)
tr.trdestroy()
    close a trace database, cleaning up memory and files

trlookup_segtype(char)
    return units and description for segtype char


