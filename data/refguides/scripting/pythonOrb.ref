<chapter Python Orb Access>
<info>
from antelope.orb import *
</info>
<man>
% man pythonorb
</man>
<pythonfunction>

orbopen(orbname, perm = 'r')
Orb(orbname = address, perm = 'r')
    open the specified orbserver name with permission perm ("r", "w", "r&", or "w&"), 
    returning the open file descriptor orb

orbclose(orb)
orb.close()
    close an orbserver connection

orbselect(orb, re)
orb.select(re)
    select packets with sourcenames which match the regular expression re.

orbreject(orb, re)
orb.reject(re)
    reject packets with sourcenames which match the regular expression re.

orbseek(orb, which)
orb.seek(which)
    position the orb connection packet pointer according to which;
    which may be an explicit pktid, or ORBCURRENT, ORBPREV,
    ORBNEXT, ORBNEXT_WAIT, ORBOLDEST, or ORBNEWEST.

orbposition(orb, from)
orb.position(from)
    position the orb connection packet pointer according to
    from; from may be "newest", "oldest", or any (UTC) time string
    recognized by str2epoch(3).

orbtell(orb)
orb.tell()
    return the current orb connection position (pktid).

orbafter(orb, time)
orb.after(time)
    position the orb connection packet pointer to the first
    packet after the specified time. Time must be UTC
    epoch time in seconds, not string.

orbexhume(filename)
    prepare to save/restore orb state to/from filename

orbresurrect(orb)
orb.resurrect()
    restore orb position from state, save to state when bury is called

orbbury(orb, pktid, pkttime)
orb.bury(pktid, pkttime)
    Save orb position to state file

orbping(orb)
orb.ping()
    test if the specified orb responds; return version number.

(pktid, srcname, pkttime, pkt, nbytes) = orbget(orbfd, which)
(pktid, srcname, pkttime, pkt, nbytes) = orbfd.get(which)
    get single packet corresponding to which; this can be an
    explicit pktid, or "ORBCURRENT", "ORBPREV", "ORBNEXT",
    "ORBNEXT_WAIT", "ORBOLDEST", or "ORBNEWEST". 

(pktid, srcname, pkttime, pkt, nbytes) = orbreap(orb)
(pktid, srcname, pkttime, pkt, nbytes) = orb.reap()
    get the next packet from the orb; this is the fastest,
    most efficient way of reading packets.

(pktid, srcname, pkttime, pkt, nbytes) = orbreap_timeout(orb, maxseconds)
(pktid, srcname, pkttime, pkt, nbytes) = orb.reap_timeout(maxseconds)
    get the next packet from the orb, but return early if
    no packets have appeared in maxseconds. In this case,
    the returned pktid will be undef.

orbpkt_string(srcname, time, packet, nbytes)
    return forb(5) string representation of packet

orbput(orb, srcname, pkttime, pkt, nbytes)
orb.put(srcname, pkttime, pkt, nbytes)
    put the specified packet onto the orb.

orbputx(orb, srcname, pkttime, pkt, nbytes)
orb.putx(srcname, pkttime, pkt, nbytes)
    put the specified packet onto the orb, with return acknowledgement

orbstat(orb)
orb.stat()
    Get the standard status values from the orb; this
    return a dictionary with the following keys:
<example>
address     closes      connections 
errors      host        maxdata     
maxpkts     maxsrc      messages    
nclients    nsources    opens       
orb_start   pid         port        
rejected    started     version     
when        who         
</example>

(when, clients) = orbclients(orb)
(when, clients) = orb.clients()
    when is scalar; clients is list of client
    objects, one object per client. Each object has the
    following methods:
<example>
address     bytes       
errors      fd          host        
lastpkt     lastrequest mymessages  
nreads      nreject     nrequests   
nselect     nwrites     packets     
perm        pid         pktid       
port        priority    read        
reject      select      started     
thread      what        who         
</example>

(when, sources) = orbsources(orb)
(when, sources) = orb.sources()
    when is scalar; sources is list of source
    dictionaries,  one  dictionary  per source.  Each dictionary has the
    following keys:
<example>
active       nbytes       
npkts        slatest      slatest_time 
soldest      soldest_time srcname      
</example>

(old,new,max,range,laggards)=orblag(orb,match,reject)
(old,new,max,range,laggards)=orb.lag(match,reject)
    returns oldest, newest, and pktid range, with list of clients
    matching match/reject parameter. Each element of list contains
    client lag, thread, who and what
